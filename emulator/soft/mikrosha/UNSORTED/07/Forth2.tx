æææææD¡                                                                                                                                                                                                                                                                   **************************************                        *                                    *                        *       fort - sistema  ls - 1       *                        *                                    *                        *      rukowodstwo programmista      *                        *                                    *                        *          ( prodolvenie )           *                        *                                    *                        **************************************                                                                                                                                                                                                                                                                                                                                                              fajl 2                                                                                                                                                                                                                                                                                                                                                                                                                          VII. logi~eskie operacii i operacii srawneniq               =================================================                                                                            wse logi~eskie operacii wypolnq`tsq pobitno nad dwuh-    bajtnfmi zna~eniqmi.                                               FALSE  ( ---> FALSE ) 83, UC                                  TRUE   ( ---> TRUE )  83, UC                                  NOT    ( N1 ---> N2 ) 83       logi~eskoe 'ne'                AND    ( N1 N2 ---> N3 ) 83    logi~eskoe 'i'                 oR     ( N1 N2 ---> N3 ) 83    logi~eskoe 'ili'               XOR    ( N1 N2 ---> N3 ) 83    logi~eskoe 'iskl`~.ili'        =      ( N1 N2 ---> FLAG ) 83  TRUE, esli N1=N2               0=     ( N ---> FLAG ) 83      TRUE, esli N=0                 <>     ( N1 N2 ---> FLAG ) 83* TRUE, esli N1 i N2                                            razli~ny.                      >      ( N1 N2 ---> FLAG ) 83  TRUE, esli N1>N2               0>     ( N ---> FLAG ) 83      TRUE, esli N>0                 U>     ( UN1 UN2 ---> FLAG ) * TRUE, esli UN1>UN2             >=     ( N1 N2 ---> FLAG )     TRUE, Esli N1 ne menx-                                        {e N2                          <      ( N1 N2 ---> FLAG ) 83  TRUE, esli N1<N2               0<     ( N ---> FLAG ) 83      TRUE, esli N<0                 U<     ( UN1 UN2 ---> FLAG )83 TRUE, esli UN1<UN2             D<     ( D1 D2 ---> FLAG ) 83  TRUE, esli D1<D2               <=     ( N1 N2 ---> FLAG ) *   TRUE, esli N1 ne bolx-                                        {e N2                                                                                                                                                               VIII. slowarx fort-sistemy                                  ==============================                                                                                                   1. slowarnye spiski                                                                                             slowarx fs sostoit iz slowarnyh spiskow, soderva}ih      slowarnye statxi. kavdyj spisok imeet nazwanie, kotoroe       samo qwlqetsq slowom drugogo spiska.                               odin iz spiskow imeet osobyj status - |to spisok s       imenem  FORTH.                                                     programmist movet prosmatriwatx spiski, dobawlqtx w      nih nowye statxi i udalqtx starye.                                 pri poiske slowa fs prosmatriwaet ne wse spiski,  a      tolxko spisok, na kotoryj ukazywaet peremennaq CONTEXT        (budem nazywatx ego spiskom poiska), i zatem spisok FORTH.    kavdyj spisok prosmatriwaetsq, na~inaq s poslednego sozdan-   nogo w nem slowa.                                                  dobawlenie nowyh slow proizwoditsq w spisok, na koto-    ryj ukazywaet peremennaq CURRENT (ego budem nazywatx spis-    kom dobawleniq).                                                                                                                 WORDS       ( ---> ) 83*      raspe~atatx slowa spis-                                       ka poiska i FORTH               VLIST                         - to ve, ~to i WORDS                                          (slowo iz 79-STANDARD)          VOCABULARY  ( ---> ) 83       ispolxzuetsq w wide:                                          "VOCABULARY imq"                                              sozdatx spisok "imq".                                         pri wypolnenii slowa                                          "imq" |tot spisok budet                                       nazna~en spiskom poiska.        DEFINITIONS ( ---> ) 83       nazna~itx spisok poiska                                       spiskom dobawleniq.             CONTEXT     ( ---> ADDR ) 83, UV   adres, po kotoromu                                       hranitsq adres na~ala                                         prosmotra spiska poiska.        CURRENT     ( ---> ADDR ) 83, UV   adres, po kotoromu                                       hranitsq adres na~ala                                         prosmotra spiska dobaw-                                       leniq.                          VOC-LINK    ( ---> ADDR ) *, UV    adres na~ala pro-                                        smotra spiska slowarnyh                                       statej tipa VOCABULARY                                                                                    2. slowarnye statxi                                                                                             slowarnaq statxq sostoit iz ~etyreh ~astej:                        - pole imeni (NAME FIELD), adres ego na~ala                     obozna~aetsq NFA;                                           - pole swqzi (LINK FIELD), adres ego na~ala                     obozna~aetsq LFA;                                           - pole koda (CODE FIELD), adres ego na~ala                      obozna~aetsq CFA;                                           - pole parametrow (PARAMETER FIELD ili BODY),                   adres ego na~ala - PFA (pole parametrow nazy-                 wa`t takve "telom" slowarnoj statxi)).                 pole imeni na~inaetsq s bajta, soderva}ego dlinu imeni   i dwa bita, zanqtye priznakami IMMEDIATE i SMUDGE. zatem w    pole imeni zapisano samo imq dlinoj do 31 simwola, kavdyj     iz kotoryh imeet kod, nahodq}ijsq w diapazone ot 20H do 7FH        priznak SMUDGE delaet slowarnu` statx` "newidimoj" pri   poiske. On pozwolqet fs realizowatx princip "polraboty ne     pokazywa`t" - poka statxq dlq dannogo slowa tolxko sozdaet-   sq, bit SMUDGE ustanowlen. kak tolxko ona budet polnostx`     sozdana - SMUDGE budet sbro{en.                                    pole swqzi sodervit NFA predydu}ego slowa w spiske.            pole koda sodervit programmu w ma{innyh kodah, wyzywa-   emu` fs pri ispolnenii dannogo slowa. ~asto |to pole soder-   vit wsego odnu komandu CALL.                                       telo statxi movet sodervatx:                                       - spisok CFA drugih slow (esli dannoe slowo opre-               deleno ~erez dwoeto~ie);                                    - ma{innye kody (esli ono opredeleno ~erez slowo                CODE);                                                      - dannye (pri opredelenii ~erez CONSTANT, VARI-                 ABLE, QUAN i t.p.);                                         - l`bu` drugu` informaci`.                                                                                             LATEST ( ---> NFA ) *       NFA prevnego slowa w                                          spiske dobawleniq                 ID.    ( NFA ---> ) *       wywesti na |kran imq                                          slowa i probel                    SMUDGE ( ---> ) *           izmenitx priznak SMUDGE                                       u poslednej statxi w spis-                                    ke dobawleniq                     >BODY  ( CFA ---> PFA ) 83*                                   >LINK  ( CFA ---> LFA ) 83*                                   >NAME  ( CFA ---> NFA ) 83*                                   BODY>  ( PFA ---> CFA ) 83*                                   LINK>  ( LFA ---> CFA ) 83*                                   NAME>  ( NFA ---> CFA ) 83*                                   L>NAME ( LFA ---> NFA ) 83*                                   N>LINK ( NFA ---> LFA ) 83*                                   CFL    ( ---> UN ) *, UC                                      FIND   ( ADDR ---> ADDR FALSE / CFA N )                                          najti w spiske poiska slowo, imq                              kotorogo w wide upakowannoj stroki                            hranitsq w ADDR. Esli slowo ne naj-                           deno, to FALSE. esli najdeno - to                             w stek kladetsq ego CFA i ~islo N:                            N=1 dlq slow IMMEDIATE, N=-1 dlq                              ostalxnyh.                                                                                                                                                                     3. sozdanie i udalenie statej                                                                                       :         ( ---> ) 83, E   ispolxzuetsq w wide:                                          "  : imq ... ; "                                              i sozdatx w nem zagolowok                                     statxi s imenem "imq".                                        ustanowitx SMUDGE i pere-                                     westi fs w revim kompilqcii        eXIt      ( ---> ) 83, C   kon~itx wypolnenie slowa.                      0              nedopustimo wnutri ciklow                                     Do/?DO ... LOOP/+LOOP .            ;         ( ---> ) 83,I,C  skompilirowatx w slowarx                                      CFA slowa EXIT, sbrositx                                      SMUDGE w sozdawaemom slowe                                    i perejti w revim ispolne-                                    niq (sm. ":" ).                    [COMPILE] ( ---> ) 83,I,C  ispolxzuetsq w wide                                           "[COMPILE] imq". skompili-                                    rowatx w slowarx CFA slowa                                    "imq", dave esli ono imeet                                    priznak IMMEDIATE .                [         ( ---> ) 83, I   ustanowatx revim ispolneniq        ]         ( ---> ) 83      ustanowitx revim kompilqcii        LITERAL                  - sm. operacii so stekom                                        primer ispolxzowaniq:                                         opredeleniq slowa a                                            : a 10 ;                                                     i                                                              : a [ 2 5 * ] LITERAL ;                                      |kwiwalentny.                      DLITERAL                 - sm. operacii so stekom             IMMEDIATE ( ---> ) 83      ustanowatx priznak                                            IMMEDIATE dlq poslednego                                      slowa spiska dobawleniq            FENCE     ( ---> ADDR ) *, UV   adres, na~inaq s koto-                                   rogo movno udalqtx slowa s                                    pomo}x` FORGET                     FORGET    ( ---> ) 83      ispolxzuetsq w wide                                           "FORGET imq".                                                 wy~erknutx slowo "imq" i                                      slowa, opredelennye pozdnee                                   iz wseh spiskow.                   JOIN      ( ---> ) *, e    ispolxzuetsq w wide "JOIN                                     imq". iskl`~itx iz spiska                                     dobawleniq slowa, na~inaq s                                   "imq", i do konca, ostawiw                                    poslednee slowo. iz pamqti                                    slowa ne stira`tsq.                SCRATCH   ( ---> ) *, E    analog JOIN, iskl`~a`}ij                                      tolxko "imq".                                                                                                                                                          IX. peremennye i konstanty                                  ==============================                                                                                        konstanty i peremennye hranqt zna~enie w pole para-      metrow swoih statej. konstanty pri wypolnenii ostawlq`t w     steke "zna~enie konstanty". peremennye ostawlq`t w steke      adres, po kotoromu zapisano zna~enie (PFA swoej statxi).      analogi~noe dejstwie ime`t slowa, pome~aemye "UC" i "UV"      (sm. "obozna~eniq").                                                                                                             CONSTANT ( N ---> ) 83   ispolxzuetsq w wide "CONSTANT                                 imq". sozdatx slowo "imq",                                    qwlq`}eesq konstantoj so zna-                                 ~eniem N.                            VARIABLE ( ---> ) 83      ispolxzuetsq w wide "VARI-                                   ABLE imq". sozdatx slowo                                      "imq", qwlq`}eesq peremennoj.        QUAN     ( ---> ) *       ispolxzuetsq w wide "QUAN                                    imq". Sozdatx slowo "imq",                                    qwlq`}eesq konstantoj, dopus-                                 ka`}ej izmenenie swoego zna-                                  ~eniq s pomo}x` "to".                TO       ( N -- ) *       ispolxzuetsq w wide "to imq"                                 gde "imq" opredeleno ~erez                                    QUAN ili VECT (sm."struktury                                  uprawleniq"). priswoitx kon-                                  stante "imq" zna~enie N.                                                                           primer: >VARIABLE ABC  QUAN DEF  5 CONSTANT GHK                       >10 ABC !       (zapisatx w ABC ~islo 10)                     >ABC @ GHK + TO DEF  (DEF=ABC+GHK)                            >DEF .          (wywesti DEF na |kran)                        15                                                                                                                                                                                        X. sozdanie opredelq`}ih slow                               =================================                                                                                     slowa, s pomo}x` kotoryh sozda`tsq nowye slowa, nazy-    wa`tsq opredelq`}imi. k nim otnosqtsq, naprimer, ":",         "QUAN", "VOCABULARY". programmist movet wwoditx nowye op-     redelq`}ie slowa, opisywa`}ie nuvnye emu struktury dannyh.    (esli ~to-to budet neponqtno, ne unywajte: |to naibolee       slovnyj razdel. no |to i naibolee mo}noe sredstwo qzyka!)                                                                        CREATE    ( ---> ) 83      ispolxzuetsq pri kompilqcii                                  opredelq`}ih slow w wide:                                     ":  imq1 ... CREATE ... ;".                                   pri wypolnenii slowa "imq1"                                   w wide "imq1 imq2" sozdatx                                    w spiske dobawleniq zagolo-                                   wok statxi s imenem "imq2".                                   pri wypolnenii slowa "imq2"                                   w stek budet poloven ego PFA        DOES>     ( ---> ) 83,I,C  ispolxzuetsq pri kompilqcii                                  opredelq`}ih slow w wide                                      ": imq1 ... CREATE ... DOES>                                  ... ;". pri ispolnenii slowa                                  "imq2", opredelennogo ~erez                                   "imq1" w wide "imq1 imq2",                                    w stek budet poloven PFA                                      slowa "imq2" i ispolnena                                      programma na qzyke fort, za-                                  pisannaq posle DOES>.               ;CODE     ( ---> ) 83,I,C  analog DOES>. ispolxzuetsq                                   w wide ": imq1 ... CREATE                                     ... ;CODE ... END-CODE". pri                                  wypolnenii slowa "imq2" bu-                                   det ispolxzowana programma                                    w kodah, zapisannaq posle                                     ";CODE".(sm."wstroennyj as-                                   sembler").                          (DOES>)                    kompiliruetsq slowami                                        "DOES>" i ";CODE".                  <BUILDS                    |kwiwalent CREATE iz stan-                                   darta FIG-FORTH.                    COMPILE   ( ---> ) 83, s   oby~no ispolxzuetsq w opre-                                  delq`}ih slowah ili slowah,                                   ime`}ih priznak IMMEDIATE, w                                  wide "COMPILE imq". pri is-                                   polnenii opredelq`}ego slo-                                   wa skompilirowatx w telo op-                                  redelqemogo slowa CFA slowa                                   "imq".                              [']       ( ---> CFA ) pri ispolnenii  83, I                            ( ---> ) pri kompilqcii                                                       ispolxzuetsq w wide "[']                                      imq". pri kompilqcii zapo-                                    mnitx w sloware CFA slowa                                     "imq". pri wypolnenii |tot                                    CFA budet poloven w stek.           '         ( ---> CFA ) 83  ostawlqet w steke CFA                                        sledu`}ego slowa wo whodnom                                   potoke.                             HERE      ( ---> ADDR ) 83, UC   adres wer{iny (t.e.                                    perwogo swobodnogo bajta)                                     slowarq.                            n         ( ---> ADDR ) 83, UV   peremennaq so zna~e-                                   niem HERE.                          ALLOT     ( N ---> ) 83    zarezerwirowatx w sloware                                    N bajtow (uweli~itx HERE                                      na N).                              ,         ( N ---> ) 83    zarezerwirowatx w sloware                                    2 bajta, zapisaw tuda N.            C,        ( C ---> ) 83    zarezerwirowatx w sloware                                    1 bajt, zapisaw tuda C.             ",        ( ADDR ---> ) *  zarezerwirowatx w sloware                                    mesto dlq upakowannoj stro-                                   ki, hranq}ejsq po adresu                                      ADDR, i zapisatx ee tuda.                                                                         primer: wozmovnoe opredelenie slow CONSTANT i [']             : CONSTANT CREATE , @ ;                                       : ['] ' [COMPILE] LITERAL ; IMMEDIATE                                                                                                                                                                 XI. struktury uprawleniq                                    ============================                                                                                                       1. wyzow slow.                                                                                             INTERPRET  ( ---> ) 83*  prointerpretirowatx tekst                                     whodnogo potoka (sm. BLK)            EXECUTE ( ADDR ---> ) 83  wypolnitx slowa s CFA=ADDR          @EXECUTE ( ADDR ---> ) *  wypolnitx slowo, CFA kotoro-                                 go zapisan po adresu ADDR            CALL    ( ---> ADDR ) *,UC  adres to~ki whoda wnutren-                                 nego interpretatora>                 NEW     ( ---> ) *,E     ispolxzuetsq w wide "NEW imq"                                 esli w spiske dobawleniq estx                                 dwa slowa s imenem "imq",                                     sdelatx tak, ~toby wmesto                                     predydu}ego ispolnqlasx nowaq                                 wersiq.                              VECT    ( ---> ) *       ispolxzuetsq w wide"VECT imq"                                 sozdatx slowo "imq", pri wy-                                  polnenii kotorogo budet is-                                   polneno slowo, CFA kotorogo                                   zapisano w "imq" s pomo}x`                                    "to imq".                            CASE:   ( ---> ) *, E    ispolxzuetsq w wide:                                          "CASE: imq spisok_slow ;CASE"                                 gde "spisok_slow" - posledo-                                  watelxnostx imen slow, ne                                     ime`}ih priznaka IMMEDIATE.                                   sozdatx slowo "imq"(UN --> ),                                 pri wypolnenii kotorogo budet                                 wypolneno UN+1-e slowo iz                                     "spiska_slow" (weli~ina UN                                    ne prowerqetsq). pri sozdanii                                 "imq" fs nahoditsq w revime                                   kompilqcii.                          ;CASE   ( ---> ) *,I     sm. CASE                             NOOP    ( ---> ) *       ni~ego ne sdelatx                    BREAK   ( ---> ) *,C     esli pri wypolnenii slowa bu-                                 det navata klawi{a,dovdatxsq                                  powtornogo navatiq. Esli po-                                  wtorno budet navata "C" (la-                                 tinskaq), prerwatx wypolnenie                                 (ispolxzowano w WORDS, VLIST,                                 MSAVE i nekotoryh drugih slo-                                 wah).                                primery:                                                    1) >VECT operaciq                                                >5 7                                                          >' + to operaciq ( "operaciq"=+)                              >operaciq 3                                                   >' + to operaciq ( "operaciq"=*)                              >operaciq .                                                   36                                                         2) >CASE: operaciq + - * ;CASE                                   >5 7                                                          >0 operaciq                                                   >3                                                            >2 operaciq .                                                 36                                                                                                                                                                                                ( prodolvenie w fajle 3 )                                                                                  ÿÔ